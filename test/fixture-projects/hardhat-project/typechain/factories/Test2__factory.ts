/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Test2, Test2Interface } from "../Test2";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_test1",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161014c38038061014c8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b603f8061010d6000396000f3fe6080604052600080fdfea264697066735822122069b51c9821dbbaeb1aa6b431d8a32633402138f43c9c3796da15a40aed2f3fac64736f6c63430008040033";

export class Test2__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _test1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Test2> {
    return super.deploy(_test1, overrides || {}) as Promise<Test2>;
  }
  getDeployTransaction(
    _test1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_test1, overrides || {});
  }
  attach(address: string): Test2 {
    return super.attach(address) as Test2;
  }
  connect(signer: Signer): Test2__factory {
    return super.connect(signer) as Test2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Test2Interface {
    return new utils.Interface(_abi) as Test2Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test2 {
    return new Contract(address, _abi, signerOrProvider) as Test2;
  }
}
